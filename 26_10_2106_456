***************************Assignment 4***********************************************
class Flower:
   
    def __init__(self,flower_name,price_per_kg,stock_available):
      self.flower_name = flower_name
      self.price_per_kg = price_per_kg
      self.stock_available=stock_available
      
    def getFlower_name(self):
      return self.flower_name    
      
    def setFlower_name(self,flower_name):
       self.flower_name=flower_name
       
    def getPrice_per_kg(self):
       return self.price_per_kg
       
    def setPrice_per_kg(self,price_per_kg):  
       self.price_per_kg=price_per_kg
       
    def getStock_available(self):
       return self.setStock_available
       
    def setStock_available(self,setStock_available):  
       self.stock_available=stock_available
       
    def validate_flower(self):
       if self.flower_name=='Orchid' or self.flower_name=='Rose' or self.flower_name=='Jasmine':
          return True
       else:
          return False
          

    def validate_stock(self,required_quantity):
        if self.stock_available >= required_quantity:
           return True
        else:
           return False
    def sell_flower(self,required_quantity):
        if self.validate_flower() and self.validate_stock(required_quantity):
          self.stock_available=self.stock_available - required_quantity
          return True
        else:
            return False
          
    def check_level(self):
     if self.flower_name=='Orchid' and self.stock_available<15:
        return True
     elif elf.flower_name=='Rose' and self.stock_available<25:
        return True
     elif self.flower_name=='Jasmine' and self.stock_available<40:
        return True
     else:
       return False
       
# object creation
f1=Flower('Rose',60,100)
#f1.sell_flower('Rose')
#f1.setPrice_per_kg(60)
#f1.setStock_available(100)
name='Rose'
quantity=50
print(f1.getFlower_name())
print(f1.sell_flower(quantity))
if f1.getFlower_name()=='Rose' and f1.sell_flower(quantity):
   print("sell success..")
else:
   print("not sell")
       
***************************Assignment 5***********************************************
class Customer:
    def __init__(self,customer_id,customer_name,address):
      self.customer_name = customer_name
      self.customer_id=customer_id
      self.address=address
    def  validate_cutomer_id(self):
         if len(str(self.customer_id)[:6])==6 and str(self.customer_id)[:1]=='1':
            return True
         else:
              return False
    def get_customer_id(self):
      return self.customer_id    
      
    def get_customer_name(self):
       return self.customer_name
       
    def get_address(self):
       return self.address
       
class Freight:
    freight_id=200
    counter=0
    def __init__(self,recipient_customer,from_customer,weight,distance):
        self.recipient_customer=recipient_customer
        self.from_customer=from_customer
        self.weight=weight
        self.distance=distance
        self.Freight_charge=0
    def validate_weight(self):
        if self.weight % 5 == 0:
            return True
        else:
            return False
        
    def validate_distance(self):
        if self.distance >=500 and self.distance <=5000:
            return True
        else:
            return False
        
    def forward_cargo(self):
        global freight_id
        global counter
        counter = 0
        if (self.from_customer.validate_cutomer_id() and 
           self.recipient_customer.validate_cutomer_id() 
           and self.validate_weight() and self.validate_distance()):
           self.freight_id=self.freight_id+counter
           counter=counter+2
           self.Freight_charge=self.weight * self.distance
           return True
        else:
            self.Freight_charge=0
            return False
            
    def get_freight_charge(self):
        return self.Freight_charge
        
    def get_freight_id(self):
        return self.freight_id
        
    def get_recipient_customer(self):
        return self.recipient_customer
        
    def get_from_customer(self):
        return self.from_customer
        
    def get_weight(self):
        return self.weight
        
    def get_distance(self):
        return self.distance
#-----------main -----------
r_customer=Customer(100000,' recipient Customer1','address1')
f_customer=Customer(100001,'from Customer1','address2')
f1=Freight(r_customer,f_customer,40,1000)
if f1.forward_cargo():
    print("Freight id: ",f1.get_freight_id())
    print("Freight charge: ",f1.get_freight_charge())
***************************Assignment 6***********************************************
  class Multiplex:
    list_movie_name=[]
    list_total_tickets=[]
    list_total_pnce=[]
    list_last_seat_number=[]
    
    def __init__(self,seat_number,total_price):
        self.seat_number=seat_number
        self.total_price=total_price
    def  generate_seat_number(self,movie_index,number_of_tickets):
    def  check_seat_availability(self,movie_index,number_of_tickets):  
    def  calculate_ticket_pnce(self,movie_index,number_of_tickets):
    def  calculate_ticket_pnce(self,movie_name,number_of_tickets):     
        
    def get_seat_numbers(self):
        seat_numbers=[]
      return self.seat_numbers    
      
    def get_total_pnce(self):
        total_pnce=0
       return self.get_total_pnce
   
