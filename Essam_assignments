********Ellipse.java*********************************************************
public class Ellipse extends Shape {
	
	
	private double lengthMajorAxis;
	private double lengthMinorAxis;
	private String centerCoordinates=lengthMajorAxis + "," + lengthMinorAxis;
	
	Ellipse(){
		lengthMajorAxis=0;
		lengthMinorAxis=0;
		centerCoordinates="("+0+","+0+")";
	}
   Ellipse(double lengthMajorAxis, double lengthMinorAxis) {
		super();
		this.lengthMajorAxis = lengthMajorAxis;
		this.lengthMinorAxis = lengthMinorAxis;
		this.centerCoordinates = centerCoordinates="("+lengthMajorAxis+","+lengthMinorAxis+")";
	}
 //overriding the toString() method  
 		public String toString(){
 			  return  centerCoordinates+ "("+lengthMajorAxis+","+lengthMinorAxis+") ";  
 			 } 
	public double getLengthMajorAxis() {
		return lengthMajorAxis;
	}
	public double getLengthMinorAxis() {
		return lengthMinorAxis;
	}
	public String getCenterCoordinates() {
		return centerCoordinates;
	}
	
	public double EllipseArea() { 
		double EllipseArea;
		EllipseArea=Math.PI*lengthMajorAxis*lengthMinorAxis;
		return EllipseArea;
	}
	
	public double EllipsePerimeter() {
		double EliipsePrimeter;
		EliipsePrimeter=(2*Math.PI)*Math.sqrt((Math.pow(lengthMajorAxis,2)+Math.pow(lengthMinorAxis,2))/2);
		return EliipsePrimeter;
		
	}
	
}

********Polygon.java*****************************************************************
class Polygon extends Shape {
	private double verticesX[];
	private double verticesY[];
	private int numberOfVertices;
	public Polygon() {}
	public Polygon(double[] verticesX, double[] verticesY) {
		this.verticesX = verticesX;
		this.verticesY = verticesY;
	}
	public double[] getVerticesX() {
		return verticesX;
	}
	
	public double[] getVerticesY() {
		return verticesY;
	}
	public void setVertices(double[] verticesX,double[] verticesY) {
		this.verticesX = verticesX;
		this.verticesY = verticesY;
	}
	int getNVertices(){
		return numberOfVertices;
	}
	public double area(){
		double calc=0;
		int N=verticesX.length;
		for(int i=0;i<verticesX.length;i++){
			calc=calc+((verticesX[i%N] * verticesY[(i+1)%N])-(verticesX[(i+1)%N] * verticesY[i%N]));
		}
		calc=calc/2;
		calc=Math.abs(calc);
		return calc;
	}
	public double perimeter(){
		double calc=0;
		int N=verticesX.length;
		for(int i=0;i<verticesX.length;i++){
            double xx1=(verticesX[i%N]-verticesX[(i+1)%N] )* (verticesX[i%N]-verticesX[(i+1)%N]);
            double yy1=(verticesY[(i)%N] * verticesY[(i+1)%N]) * (verticesY[(i)%N] * verticesY[(i+1)%N]);
			calc=calc+Math.sqrt(xx1+yy1);
		}
		return calc;
	}
	public String toString(){
	String XY="";
		for(int i=0;i<verticesX.length;i++){
			XY=XY+"("+verticesX[i]+","+verticesY[i]+") \n";
		}
	return XY;
	
	}
}

***************Rectangle.java*********************************************************
public class Rectangle extends Shape{
	private double height;
	private double width;
	private String upperLeftCoordinates;
	
	
	//default constructor 
	Rectangle(){
		height=0;
		width=0;
		upperLeftCoordinates="(0,0)";
	}
	//overriding the toString() method  
		public String toString(){
			  return  upperLeftCoordinates+ "("+width+","+height+") ";  
			 } 
//parameterized constructor 
	public Rectangle(double height, double width) {
		super();
		this.upperLeftCoordinates = upperLeftCoordinates="("+width+","+height+")";;
		this.height = height;
		this.width = width;
	}
	
	//Getter for the class fields...
	
	public String getUpperLeftCoordinates() {
		return upperLeftCoordinates;
	}
	public double getHeight() {
		return height;
	}
	public double getWidth() {
		return width;
	}
	
	//function that returns the area of rectangle...
	public double RectangleArea() {
		double rectangleArea;
		rectangleArea=height*width;
		return rectangleArea;
	}
	
	//function that returns the perimeter of a rectangle...
	public double RectanglePerimeter(){
		double rectanglePerimeter;
		rectanglePerimeter=2*(width+height);
		return rectanglePerimeter;
	}
	
}  

*************Shape.java****************************************************************
class Shape {
	private double x;
	private double y;

	public Shape() {

		this.x = 0;
		this.y = 0;
	}

	public Shape(double x, double y) {

		this.x = x;
		this.y = y;
	}

	double getX() {
		return this.x;
	}

	double getY() {
		return this.y;
	}

	double setX(double x) {

		this.x = x;
		return this.x;
	}

	double setY(double y) {
		this.y = y;

		return this.y;
	}

	private double area() {
		return 0;
	}

	private double perimeter() {
		return 0;
	}

	public void finalize() {

		System.out.println("finalize Shape");
	}
}
********************Triangle.java************************************************
public class Triangle extends Polygon {
	// declaring attributees...
	private static double x1;
	private static double y1;
	private String firstVertices;

	private static double x2;
	private static double y2;
	private String secondVertices;

	private static double x3;
	private static double y3;
	private String thirdVertices;

	// Getters of the above attributes...
	public static double getX1() {
		return x1;
	}
	//overriding the toString() method  
	public String toString(){
		  return "("+x1+","+y1+") "+"("+x2+","+y2+") "+"("+x3+","+y3+") ";  
		 } 
	public static double getY1() {
		return y1;
	}

	public String getFirstVertices() {
		return firstVertices;
	}

	public static double getX2() {
		return x2;
	}

	public static double getY2() {
		return y2;
	}

	public String getSecondVertices() {
		return secondVertices;
	}

	public static double getX3() {
		return x3;
	}

	public static double getY3() {
		return y3;
	}

	public String getThirdVertices() {
		return thirdVertices;
	}

	// Default constructor...
	Triangle() {
		x1 = x2 = x3 = 0;
		y1 = y2 = y3 = 0;
		firstVertices = "(" + x1 + "," + y1 + ")";
		secondVertices = "(" + x2 + "," + y2 + ")";
		thirdVertices = "(" + x3 + "," + y3 + ")";
	}

	// parameterized constructor...

	public Triangle(double x1, double y1, double x2, double y2, double x3, double y3) {
		super();
		this.x1 = x1;
		this.y1 = y1;
		this.firstVertices = firstVertices = "(" + x1 + "," + y1 + ")";

		this.x2 = x2;
		this.y2 = y2;
		this.secondVertices = secondVertices = "(" + x2 + "," + y2 + ")";

		this.x3 = x3;
		this.y3 = y3;
		this.thirdVertices = thirdVertices = "(" + x3 + "," + y3 + ")";
	}

	// function that returns area of a triangle..
	public static double TriangleArea() {
		double triagnleArea;
		// calculating the area of a triangle using 3 point formula...
		triagnleArea = Math.abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2);
		return triagnleArea;
	}

	// function that returns the perimeter of a triangle
	public static double TrianglePerimeter() {
		double traianglePerimeter, side1, side2, side3;
		
		// calculating the 3 sides of a triangle using the 3 vertices...
		side1 = Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2));
		side2 = Math.sqrt(Math.pow((x3 - x1), 2) + Math.pow((y3 - y1), 2));
		side3 = Math.sqrt(Math.pow((x3 - x2), 2) + Math.pow((y3 - y2), 2));

		// adding all the 3 side to find the perimeter...
		traianglePerimeter = side1 + side2 + side3;
		return traianglePerimeter;

	}

}
**************TestShapes.java**********************************

public class TestShapes {

public static void main(String[] args) {
	System.out.println("-----------------For Shape-----------------------------");
	// creating shapeect of class	Shape
	Shape shape = new Shape();
	shape = new Ellipse();
	System.out.println("-----------------For Ellipse-----------------------------");
	// creating shapeect of class Ellipse
	// Default output
	System.out.println("Ellipse default center coordinate: " + ((Ellipse) shape).getCenterCoordinates().toString());
	System.out.println("Ellipse default length of Major Axis: " + ((Ellipse) shape).getLengthMajorAxis());
	System.out.println("Ellipse default length of Minor Axis: " + ((Ellipse) shape).getLengthMinorAxis());
	System.out.println("Ellipse Area: " + ((Ellipse) shape).EllipseArea());
	System.out.println("Ellipse perimeter: " + ((Ellipse) shape).EllipsePerimeter());

	// creating another shapeect of class Ellipse and passing values (2,5.5) as
	// parameter
	shape = new Ellipse(2, 5.5);
	// output according to value passed i.e (2,5.5)
	System.out.println(shape);
	System.out.println("\nEclipse parameterized center coordinate: " + ((Ellipse) shape).getCenterCoordinates().toString());
	System.out.println("Ellipse length of Major Axis: " + ((Ellipse) shape).getLengthMajorAxis());
	System.out.println("Ellipse length of Minor Axis: " + ((Ellipse) shape).getLengthMinorAxis());
	System.out.println("Ellipse Area: " + ((Ellipse) shape).EllipseArea());
	System.out.println("Ellipse perimeter: " + ((Ellipse) shape).EllipsePerimeter());
	shape.finalize();

	System.out.println("-----------------For Rectangle-----------------------------");

	// Creating shapeect of Rectangle class...
	shape = new Rectangle();
	// Display output with default values;
	System.out.println("Rectangle default left upper cordinates: " + ((Rectangle) shape).getUpperLeftCoordinates());
	System.out.println("Rectangle default height: " + ((Rectangle) shape).getHeight());
	System.out.println("Rectangle default width: " + ((Rectangle) shape).getWidth());
	System.out.println("Rectangle Area: " + ((Rectangle) shape).RectangleArea());
	System.out.println("Rectangle Perimeter: " + ((Rectangle) shape).RectanglePerimeter());

	// Creating another shapeect of Rectangle class and passing (6.9,7.2) as values...
	shape = new Rectangle(6.9, 7.2);
	// Displaying Output according to values i.e (6.9,7.2)..
	System.out.println(shape);
	System.out.println("\nRectangle left upper cordinates: " + ((Rectangle) shape).getUpperLeftCoordinates());
	System.out.println("Rectangle height: " + ((Rectangle) shape).getHeight());
	System.out.println("Rectangle width: " + ((Rectangle) shape).getWidth());
	System.out.println("Rectangle Area: " + ((Rectangle) shape).RectangleArea());
	System.out.println("Rectangle Perimeter: " + ((Rectangle) shape).RectanglePerimeter());
	shape.finalize();

	System.out.println("----------------For Tiangle------------------------------");

	// Creating shapeect of Triangle class..
	Polygon tri1 = new Triangle();
	System.out.println("\nTriangle default cordinates: " + ((Triangle) tri1).getFirstVertices() + "," + ((Triangle) tri1).getSecondVertices()
			+ "," + ((Triangle) tri1).getThirdVertices());
	System.out.println("Triangle default Area: " + ((Triangle) tri1).TriangleArea());
	System.out.println("Triangle default Perimeter: " + ((Triangle) tri1).TrianglePerimeter());

	// Creating another shapeect of Triangle class and passing value
	// (15,15),(23,30),(50,25)..
	tri1= new Triangle(15, 15, 23, 30, 50, 25);
	// Display according to the values passed...
	//System.out.println("\nTriangle cordinates: " + tri1.getFirstVertices() + "," + tri1.getSecondVertices() + ","
		//	+ tri1.getThirdVertices());
	System.out.println(tri1);
	System.out.println("Triangle Area: " + ((Triangle) tri1).TriangleArea());
	System.out.println("Triangle Perimeter: " + ((Triangle) tri1).TrianglePerimeter());
	tri1.finalize();
	System.out.println("----------------For Polygon------------------------------");

	// Creating shapeect of Triangle class..
	 double verticesX[]={4,9,11,2};
	double verticesY[]={10,7,2,2};
		shape =new Polygon(verticesX,verticesY);
		System.out.println("Co-ordinates of Polygon(X,y)");
		System.out.println(((Polygon)shape));
		System.out.println("Area Of Polygon : "+((Polygon)shape).area());
		System.out.println("Perimeter of polygon: "+((Polygon)shape).perimeter());
		shape.finalize();

}
}
